package kotlin.expectations

import kotlin.test.assertTrue


fun Expectation<Byte>.toBeGreaterOrEqualTo(val value: Byte) : ExpectationChain<Byte> {
    assertTrue(target >= value)
    return ExpectationChain(this)
}

fun Expectation<Byte>.toBeGreaterThan(val value: Byte) : ExpectationChain<Byte> {
    assertTrue(target > value)
    return ExpectationChain(this)
}

fun Expectation<Byte>.toBeLessOrEqualTo(val value: Byte) : ExpectationChain<Byte> {
    assertTrue(target <= value)
    return ExpectationChain(this)
}

fun Expectation<Byte>.toBeLessThan(val value: Byte) : ExpectationChain<Byte> {
    assertTrue(target < value)
    return ExpectationChain(this)
}

fun Expectation<Byte>.toBePositive() : ExpectationChain<Byte> {
    assertTrue(target > 0)
    return ExpectationChain(this)
}

fun Expectation<Byte>.toBeInRange(val lower: Byte, val upper: Byte) : ExpectationChain<Byte> {
    assertTrue(target >= lower && target <= upper)
    return ExpectationChain(this)
}

fun Expectation<Byte>.toBeApproximately(val value: Byte, val tolerance: Byte) : ExpectationChain<Byte> {
    return expect(target).toBeInRange((value - tolerance) as Byte, (value + tolerance) as Byte)
}


public val Byte.should : Should<Byte> get() = Should(this)

fun Should<Byte>.beGreaterOrEqualTo(val value: Byte) : ShouldChain<Byte> {
    expector.toBeGreaterOrEqualTo(value)
    return ShouldChain(this)
}

fun Should<Byte>.beGreaterThan(val value: Byte) : ShouldChain<Byte> {
    expector.toBeGreaterThan(value)
    return ShouldChain(this)
}

fun Should<Byte>.beLessOrEqualTo(val value: Byte) : ShouldChain<Byte> {
    expector.toBeLessOrEqualTo(value)
    return ShouldChain(this)
}

fun Should<Byte>.beLessThan(val value: Byte) : ShouldChain<Byte> {
    expector.toBeLessThan(value)
    return ShouldChain(this)
}

fun Should<Byte>.bePositive() : ShouldChain<Byte> {
    expector.toBePositive()
    return ShouldChain(this)
}

fun Should<Byte>.beInRange(val lower: Byte, val upper: Byte) : ShouldChain<Byte> {
    expector.toBeInRange(lower, upper)
    return ShouldChain(this)
}

fun Should<Byte>.beApproximately(val value: Byte, val tolerance: Byte) : ShouldChain<Byte> {
    expector.toBeApproximately(value, tolerance)
    return ShouldChain(this)
}