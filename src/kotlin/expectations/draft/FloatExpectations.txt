package kotlin.expectations

import kotlin.test.assertTrue

fun Expectation<Float>.toBeGreaterOrEqualTo(val value: Float) : ExpectationChain<Float> {
    assertTrue(target >= value)
    return ExpectationChain(this)
}

fun Expectation<Float>.toBeGreaterThan(val value: Float) : ExpectationChain<Float> {
    assertTrue(target > value)
    return ExpectationChain(this)
}

fun Expectation<Float>.toBeLessOrEqualTo(val value: Float) : ExpectationChain<Float> {
    assertTrue(target <= value)
    return ExpectationChain(this)
}

fun Expectation<Float>.toBeLessThan(val value: Float) : ExpectationChain<Float> {
    assertTrue(target < value)
    return ExpectationChain(this)
}

fun Expectation<Float>.toBePositive() : ExpectationChain<Float> {
    assertTrue(target > 0)
    return ExpectationChain(this)
}

fun Expectation<Float>.toBeInRange(val lower: Float, val upper: Float) : ExpectationChain<Float> {
    assertTrue(target >= lower && target <= upper)
    return ExpectationChain(this)
}

fun Expectation<Float>.toBeApproximately(val value: Float, val tolerance: Float) : ExpectationChain<Float> {
    return expect(target).toBeInRange(value - tolerance, value + tolerance)
}

public val Float.should : Should<Float> get() = Should(this)

fun Should<Float>.beGreaterOrEqualTo(val value: Float) : ShouldChain<Float> {
    expector.toBeGreaterOrEqualTo(value)
    return ShouldChain(this)
}

fun Should<Float>.beGreaterThan(val value: Float) : ShouldChain<Float> {
    expector.toBeGreaterThan(value)
    return ShouldChain(this)
}

fun Should<Float>.beLessOrEqualTo(val value: Float) : ShouldChain<Float> {
    expector.toBeLessOrEqualTo(value)
    return ShouldChain(this)
}

fun Should<Float>.beLessThan(val value: Float) : ShouldChain<Float> {
    expector.toBeLessThan(value)
    return ShouldChain(this)
}

fun Should<Float>.bePositive() : ShouldChain<Float> {
    expector.toBePositive()
    return ShouldChain(this)
}

fun Should<Float>.beInRange(val lower: Float, val upper: Float) : ShouldChain<Float> {
    expector.toBeInRange(lower, upper)
    return ShouldChain(this)
}

fun Should<Float>.beApproximately(val value: Float, val tolerance: Float) : ShouldChain<Float> {
    expector.toBeApproximately(value, tolerance)
    return ShouldChain(this)
}