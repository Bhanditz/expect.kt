{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"expect.kt","tagline":"Expectations/Assertions library for Kotlin with some fluent syntax","google":"","body":"# Introduction\r\n\r\nExpect.kt is a set of assertions that allow you to assert the outcome of testing state using a more fluent and specific set of assertions than you get from the `kotlin.test`.  Each type has a set of extension functions that allow you to check certain specifics that relate to that type.\r\n\r\nRather than fulfilling a specific need this project was started as a means to understand the [Kotlin](http://confluence.jetbrains.net/display/Kotlin/Welcome) language and explore its features (and limitations).  As it stands most of the assertions are not making good use of the \"Kotlin way\" and are shamelessly ripped off [FluentAssertions for .NET](http://fluentassertions.codeplex.com/).  The tweaking and improving come next plus there are actually some really nice bits of testing code with Kotlin.\r\n\r\n# Syntax\r\n\r\nExpect.kt allows you to use two different approaches to defining an assertion.\r\n\r\n## Expect Syntax\r\n\r\nExpect syntax offers typical expect(something).toBeInACertainState style of grammar.  The following test highlight this appraoch.\r\n\r\n    expect(\"james\").toBe(\"james\")\r\n\r\n## Fluent Syntax\r\n\r\nIt is also possible to use a more fluent syntax to make the same assertion\r\n\r\n    \"james\".should.be(\"james\")\r\n\r\n# Chaining\r\n\r\nExpect.kt allows you to chain assertions to keep things really neat and tidy.\r\n\r\n    expect(\"james\").toStartWith(\"j\").and.toEndWith(\"s\")\r\n    \r\nOr, in fluent syntax\r\n\r\n    \"james\".should.startWith(\"j\").and.endWith(\"s\")\r\n\r\n# Standard Assertions\r\n\r\nThere are a few assertions that can be used against any type,\r\n\r\n## toBe(...)/be(...)\r\n\r\nAssert that the state is the value passed in,\r\n\r\n    expect(\"james\").toBe(\"james\")\r\n    \"james\".should.be(\"james\")\r\n\r\n## toNotBe(...)/notBe(...)\r\n\r\nAssert that the state is NOT the value passed in,\r\n\r\n    expect(\"james\").toNotBe(\"henry\")\r\n    \"james\".should.notBe(\"henry\")\r\n\r\n## toBeNull()/beNull()\r\n\r\nAssert that the state is null,\r\n\r\n    expect(null).toBeNull()\r\n    null.should.beNull()\r\n\r\n## toNotBeNull()/notBeNull()\r\n\r\nAssert that the state is NOT null\r\n\r\n    expect(\"james\").toNotBeNull()\r\n    \"james\".should.notBeNull()\r\n    \r\n# Logic Assertions\r\n\r\n## toBeTrue()/beTrue()\r\n\r\nAssert that the value is `true`\r\n\r\n    expect(true).toBeTrue()\r\n    true.should.beTrue()\r\n    \r\n## toNotBeTrue()/notBeTrue()\r\n\r\nAssert that the state is NOT `true`\r\n\r\n    expect(false).toNotBeTrue()\r\n    false.should.notBeTrue()\r\n    \r\n## toBeFalse()/beFalse()\r\n\r\nAssert that the value is `false`\r\n\r\n    expect(false).toBeFalse()\r\n    false.should.beFalse()\r\n    \r\n## toNotBeFalse()/notBeFalse()\r\n\r\nAssert that the state is NOT `false`\r\n\r\n    expect(true).toNotBeFalse()\r\n    true.should.notBeFalse()\r\n    \r\n# String Assertions\r\n\r\n## toBeEmpty\r\n\r\nAssert that a string is empty (\"\").\r\n\r\n\texpect(\"\").toBeEmpty()\r\n    \"\".should.beEmpty()\r\n\r\n## toNotBeEmpty\r\n\r\nAssert that a string is not empty (\"\").\r\n\r\n\texpect(\"  \").toNotBeEmpty()\r\n    \"  \".should.beNotEmpty()\r\n\r\n## toHaveLength\r\n\r\nAssert that a string is of a certain length.\r\n\r\n\texpect(\"james\").toHaveLength(5)\r\n    \"james\".should.haveLength(5)\r\n\r\n## toBeBlank\r\n\r\nAssert that a string is blank, in that it is empty or contains only whitespace.\r\n\r\n\texpect(\"   \").toBeBlank()\r\n    \"    \".should.beBlank()\r\n\r\n## toNotBeBlank\r\n\r\nAssert that a string is not blank, in that it isn't empty or contains more than whitespace.\r\n\r\n\texpect(\"james\").toNotBeBlank()\r\n    \"james\".should.notBeBlank()\r\n\r\n## toBeEquivalentTo\r\n\r\nAssert that a string is equal to another string regardless of case.\r\n\r\n\texpect(\"JAMES\").toBeEquivalentTo(\"james\")\r\n    \"JAMES\".should.beEquivalentTo(\"james\")\r\n\r\n## toEndWith\r\n\r\nAssert that a string ends with another string\r\n\r\n\texpect(\"James\").toEndWith(\"es\")\r\n    \"James\".should.endWith(\"es\")\r\n\r\n## toEndWithEquivalent\r\n\r\nAssert that a string ends with another string regardless of case.\r\n\r\n\texpect(\"JAMES\").toEndWithEquivalent(\"es\")\r\n    \"JAMES\".should.endWithEquivalent(\"es\")\r\n\r\n## toContain\r\n\r\nAssert that a string contains another string.\r\n\r\n\texpect(\"JAMES\").toContain(\"AM\")\r\n    \"JAMES\".should.contain(\"AM)\r\n\r\n## toContainEquivalent\r\n\r\nAssert that a string contains another string regardless of case.\r\n\r\n## toNotContain\r\n\r\nAssert that a string doesn't contain another string.\r\n\r\n## toNotContainEquivalent\r\n\r\nAssert that a string doesn't contain another string regardless of case.\r\n\r\n## toStartWith\r\n\r\nAssert that a string starts with another string.\r\n\r\n## toStartWithEquivalent\r\n\r\nAssert that a string starts with another string regardless of case.\r\n\r\n## toMatch\r\n\r\nAssert that a string matches the given regex.\r\n\r\n# Numeric Assertions (currently Int, Long, Double)\r\n\r\n## toBeGreaterOrEqualTo\r\n\r\nAssert that a number is greater than or equal to another\r\n\r\n## toBeGreaterThan\r\n\r\nAssert that a number is greater than to another\r\n\r\n## toBeLessOrEqualTo\r\n\r\nAssert that a number is less than or equal to another\r\n\r\n## toBeLessThan\r\n\r\nAssert that a number is less than to another\r\n\r\n## toBeInRange\r\n\r\nAssert that a number is within the lower and upper bounds passed in\r\n\r\n## toBeApproximately\r\n\r\nAssert that a number is approximately another, the level of error is defined by the tolerance value (+/- tolerance)\r\n\r\n# Date and Time Assertions\r\n\r\n## toBeAfter\r\n\r\nAssert that the given date is after the passed in date.\r\n\r\n## toBeBefore\r\n\r\nAssert that the given date is before the passed in date.\r\n"}